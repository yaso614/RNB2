{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nconst initialState = {\n  user: {},\n  post: {}\n}; // async action creator\n// action creator\n\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n}; // (이전상태, 액션) => 다음상태\n\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.paylod);\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/mnt/c/Users/ansey/workspace/devKingdom/front/reducers/index.js"],"names":["HYDRATE","initialState","user","post","changeNickname","data","type","rootReducer","state","action","paylod"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,IAAI,EAAE,EADc;AAIpBC,EAAAA,IAAI,EAAE;AAJc,CAArB,C,CAUA;AAEA;;AACA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAChC,SAAO;AACNC,IAAAA,IAAI,EAAE,iBADA;AAEND,IAAAA;AAFM,GAAP;AAIA,CALD,C,CAQA;;;AACA,MAAME,WAAW,GAAI,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACtD,UAAQA,MAAM,CAACH,IAAf;AACC,SAAKN,OAAL;AACC,6CAAYQ,KAAZ,GAAsBC,MAAM,CAACC,MAA7B;;AAED;AACC,aAAOF,KAAP;AALF;AAOA,CARD;;AAUA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\n\r\nconst initialState = {\r\n\tuser: {\r\n\r\n\t},\r\n\tpost: {\r\n\r\n\t}\r\n};\r\n\r\n\r\n// async action creator\r\n\r\n// action creator\r\nconst changeNickname = (data) => {\r\n\treturn {\r\n\t\ttype: 'CHANGE_NICKNAME',\r\n\t\tdata,\r\n\t}\r\n}\r\n\r\n\r\n// (이전상태, 액션) => 다음상태\r\nconst rootReducer = ((state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase HYDRATE:\r\n\t\t\treturn { ...state, ...action.paylod };\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n});\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}